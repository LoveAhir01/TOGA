project,bug_num,test_name,test_prefix,except_pred,assert_pred
Gson,4,com.google.gson.stream.JsonReader_ESTest::test39,"  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
      assertEquals(""1"", string0);
}",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test39,"  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
      assertFalse(jsonReader0.isLenient());
}",0,assertFalse(jsonReader0.isLenient())
Gson,4,com.google.gson.stream.JsonReader_ESTest::test39,"  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
}",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test39,"  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      String string0 = jsonReader0.nextString();
  }",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test41,"  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""FALSE"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.nextBoolean();
      assertFalse(boolean0);
}",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test41,"  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""FALSE"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.nextBoolean();
      assertFalse(jsonReader0.isLenient());
}",0,assertFalse(jsonReader0.isLenient())
Gson,4,com.google.gson.stream.JsonReader_ESTest::test41,"  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""FALSE"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      boolean boolean0 = jsonReader0.nextBoolean();
  }",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test42,"  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""NULL"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonToken jsonToken0 = jsonReader0.peek();
      assertEquals(JsonToken.NULL, jsonToken0);
}",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test42,"  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""NULL"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
}",0,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test42,"  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""NULL"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonToken jsonToken0 = jsonReader0.peek();
      jsonReader0.nextNull();
      assertFalse(jsonReader0.isLenient());
}",0,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test42,"  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""NULL"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonToken jsonToken0 = jsonReader0.peek();
      jsonReader0.nextNull();
  }",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test45,"  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      double double0 = jsonReader0.nextDouble();
      assertEquals(1.0, double0, 0.01);
}",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test45,"  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      double double0 = jsonReader0.nextDouble();
      assertFalse(jsonReader0.isLenient());
}",0,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test45,"  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      double double0 = jsonReader0.nextDouble();
  }",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test49,"  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      long long0 = jsonReader0.nextLong();
      assertEquals(1L, long0);
}",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test49,"  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      long long0 = jsonReader0.nextLong();
      assertFalse(jsonReader0.isLenient());
}",0,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test49,"  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      long long0 = jsonReader0.nextLong();
  }",1,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test68,"  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
}",0,
Gson,4,com.google.gson.stream.JsonReader_ESTest::test68,"  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""1[Is\""A\""vL&"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.skipValue();
  }",1,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test00,"  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setHtmlSafe(true);
      jsonWriter0.value(""M8}<{;k$I]`5"");
      assertEquals(""\""M8}\\u003c{;k$I]`5\"""", stringWriter0.toString());
}",0,assertNotNull(stringWriter0.toString())
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test00,"  public void test00()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.setHtmlSafe(true);
      jsonWriter0.value(""M8}<{;k$I]`5"");
  }",0,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test05,"  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value(1L);
      assertEquals(""1"", stringWriter0.toString());
}",0,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test05,"  public void test05()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value(1L);
  }",0,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test17,"  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value((String) null);
      assertEquals(""null"", stringWriter0.toString());
}",0,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test17,"  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value((String) null);
  }",0,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test18,"  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue(""java.lang#Float@0000000003"");
      assertTrue(jsonWriter1.getSerializeNulls());
}",0,assertFalse(jsonWriter1.getSerializeNulls())
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test18,"  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.jsonValue(""java.lang#Float@0000000003"");
  }",0,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test20,"  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(true);
      jsonWriter1.close();
      jsonWriter1.close();
      assertEquals(""true"", stringWriter0.toString());
}",1,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test20,"  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(true);
      jsonWriter1.close();
      jsonWriter1.close();
      assertTrue(jsonWriter0.getSerializeNulls());
}",0,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test20,"  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.value(true);
      jsonWriter1.close();
      jsonWriter1.close();
  }",1,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test31,"  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      jsonWriter1.setLenient(true);
      jsonWriter0.value(""n!:le"");
      assertEquals(""null\""n!:le\"""", stringWriter0.toString());
}",0,
Gson,4,com.google.gson.stream.JsonWriter_ESTest::test31,"  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      JsonWriter jsonWriter1 = jsonWriter0.nullValue();
      jsonWriter1.setLenient(true);
      jsonWriter0.value(""n!:le"");
  }",0,
Gson,7,com.google.gson.stream.JsonReader_ESTest::test59,"  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""464D"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      long long0 = jsonReader0.nextLong();
      assertTrue(jsonReader0.isLenient());
}",0,assertTrue(jsonReader0.isLenient())
Gson,7,com.google.gson.stream.JsonReader_ESTest::test59,"  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""464D"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      long long0 = jsonReader0.nextLong();
      assertEquals(464L, long0);
}",1,
Gson,7,com.google.gson.stream.JsonReader_ESTest::test59,"  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""464D"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      long long0 = jsonReader0.nextLong();
  }",1,
Gson,7,com.google.gson.stream.JsonReader_ESTest::test76,"  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""464D"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      int int0 = jsonReader0.nextInt();
      assertTrue(jsonReader0.isLenient());
}",0,assertTrue(jsonReader0.isLenient())
Gson,7,com.google.gson.stream.JsonReader_ESTest::test76,"  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""464D"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      int int0 = jsonReader0.nextInt();
      assertEquals(464, int0);
}",1,
Gson,7,com.google.gson.stream.JsonReader_ESTest::test76,"  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""464D"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      int int0 = jsonReader0.nextInt();
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
}",0,assertTrue(jsonReader0.isLenient())
Gson,7,com.google.gson.stream.JsonReader_ESTest::test76,"  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""464D"");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      int int0 = jsonReader0.nextInt();
      jsonReader0.skipValue();
  }",1,
Gson,9,com.google.gson.internal.bind.JsonTreeWriter_ESTest::test25,"  public void test25()  throws Throwable  {
      JsonTreeWriter jsonTreeWriter0 = new JsonTreeWriter();
      JsonWriter jsonWriter0 = jsonTreeWriter0.value((Boolean) null);
      assertSame(jsonTreeWriter0, jsonWriter0);
}",0,
Gson,9,com.google.gson.internal.bind.JsonTreeWriter_ESTest::test25,"  public void test25()  throws Throwable  {
      JsonTreeWriter jsonTreeWriter0 = new JsonTreeWriter();
      JsonWriter jsonWriter0 = jsonTreeWriter0.value((Boolean) null);
  }",0,
Gson,9,com.google.gson.stream.JsonWriter_ESTest::test25,"  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value((Boolean) null);
      assertEquals(""null"", stringWriter0.toString());
}",0,
Gson,9,com.google.gson.stream.JsonWriter_ESTest::test25,"  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value((Boolean) null);
      assertTrue(jsonWriter0.getSerializeNulls());
}",0,assertFalse(jsonWriter0.getSerializeNulls())
Gson,9,com.google.gson.stream.JsonWriter_ESTest::test25,"  public void test25()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JsonWriter jsonWriter0 = new JsonWriter(stringWriter0);
      jsonWriter0.value((Boolean) null);
  }",0,
Gson,17,com.google.gson.DefaultDateTypeAdapter_ESTest::test7,"  public void test7()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, ""]: "");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      java.util.Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonNull0);
      assertNull(date0);
}",0,"assertEquals(defaultDateTypeAdapter0, date0)"
Gson,17,com.google.gson.DefaultDateTypeAdapter_ESTest::test7,"  public void test7()  throws Throwable  {
      Class<Timestamp> class0 = Timestamp.class;
      DefaultDateTypeAdapter defaultDateTypeAdapter0 = new DefaultDateTypeAdapter(class0, ""]: "");
      JsonNull jsonNull0 = JsonNull.INSTANCE;
      java.util.Date date0 = defaultDateTypeAdapter0.fromJsonTree(jsonNull0);
  }",0,
JxPath,12,org.apache.commons.jxpath.ri.model.dom.DOMNodePointer_ESTest::test24,"  public void test24()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      Locale locale0 = Locale.FRENCH;
      HTMLTableElementImpl hTMLTableElementImpl0 = new HTMLTableElementImpl(hTMLDocumentImpl0, ""Unknown namespace prefix: "");
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer(hTMLTableElementImpl0, locale0);
      QName qName0 = dOMNodePointer0.getName();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ""http://www.w3.org/XML/1998/namespace"");
      boolean boolean0 = dOMNodePointer0.testNode((NodeTest) nodeNameTest0);
      assertTrue(boolean0);
}",0,assertTrue(boolean0)
JxPath,14,org.apache.commons.jxpath.ri.compiler.CoreFunction_ESTest::test79,"  public void test79()  throws Throwable  {
      Constant constant0 = new Constant(""concat"");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      Object object0 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(Double.NaN, object0);
}",0,
JxPath,5,org.apache.commons.jxpath.ri.model.NodePointer_ESTest::test48,"  public void test48()  throws Throwable  {
      QName qName0 = new QName("""");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, qName0);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer1 = new VariablePointer(basicVariables0, qName0);
      int int0 = nodePointer0.compareTo(variablePointer1);
      assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
JxPath,5,org.apache.commons.jxpath.ri.model.NodePointer_ESTest::test48,"  public void test48()  throws Throwable  {
      QName qName0 = new QName("""");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, qName0);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer1 = new VariablePointer(basicVariables0, qName0);
      int int0 = nodePointer0.compareTo(variablePointer1);
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
}",0,
JxPath,5,org.apache.commons.jxpath.ri.model.NodePointer_ESTest::test48,"  public void test48()  throws Throwable  {
      QName qName0 = new QName("""");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, qName0);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer1 = new VariablePointer(basicVariables0, qName0);
      int int0 = nodePointer0.compareTo(variablePointer1);
  }",0,
JxPath,8,org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression_ESTest::test2,"  public void test2()  throws Throwable  {
      Constant constant0 = new Constant(""9|"");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      Object object0 = coreOperationGreaterThanOrEqual1.computeValue((EvalContext) null);
      assertEquals(false, object0);
}",0,assertTrue(object0)
JxPath,16,org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer_ESTest::test30,"  public void test30()  throws Throwable  {
      QName qName0 = new QName(""[QT~sGq>_#hT|#8m"", ""[QT~sGq>_#hT|#8m"");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      boolean boolean0 = JDOMNodePointer.testNode((NodePointer) variablePointer0, (Object) null, (NodeTest) nodeTypeTest0);
      assertTrue(boolean0);
}",0,assertTrue(boolean0)
JxPath,6,org.apache.commons.jxpath.ri.compiler.CoreOperationCompare_ESTest::test01,"  public void test01()  throws Throwable  {
      QName qName0 = new QName("""", """");
      VariableReference variableReference0 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationNotEqual0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      ChildContext childContext0 = new ChildContext(initialContext0, nodeTypeTest0, true, true);
      Boolean boolean0 = (Boolean)coreOperationNotEqual0.computeValue(childContext0);
      assertTrue(boolean0);
}",0,
JxPath,6,org.apache.commons.jxpath.ri.compiler.CoreOperationCompare_ESTest::test01,"  public void test01()  throws Throwable  {
      QName qName0 = new QName("""", """");
      VariableReference variableReference0 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationNotEqual0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      ChildContext childContext0 = new ChildContext(initialContext0, nodeTypeTest0, true, true);
      Boolean boolean0 = (Boolean)coreOperationNotEqual0.computeValue(childContext0);
  }",0,
JxPath,6,org.apache.commons.jxpath.ri.compiler.CoreOperationCompare_ESTest::test02,"  public void test02()  throws Throwable  {
      QName qName0 = new QName("""", """");
      VariableReference variableReference0 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationNotEqual0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      ChildContext childContext0 = new ChildContext(initialContext0, nodeTypeTest0, true, true);
      boolean boolean0 = coreOperationNotEqual0.equal(childContext0, variableReference0, nameAttributeTest0);
      assertFalse(boolean0);
}",0,
JxPath,6,org.apache.commons.jxpath.ri.compiler.CoreOperationCompare_ESTest::test02,"  public void test02()  throws Throwable  {
      QName qName0 = new QName("""", """");
      VariableReference variableReference0 = new VariableReference(qName0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, variableReference0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationNotEqual0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      ChildContext childContext0 = new ChildContext(initialContext0, nodeTypeTest0, true, true);
      boolean boolean0 = coreOperationNotEqual0.equal(childContext0, variableReference0, nameAttributeTest0);
  }",0,
JxPath,22,org.apache.commons.jxpath.ri.model.dom.DOMNodePointer_ESTest::test65,"  public void test65()  throws Throwable  {
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      DOMNodePointer dOMNodePointer0 = new DOMNodePointer((NodePointer) null, hTMLDocumentImpl0);
      PSVIDocumentImpl pSVIDocumentImpl0 = new PSVIDocumentImpl();
      Element element0 = pSVIDocumentImpl0.createElementNS("""", ""Factory could not create a child node for path: "", ""xmlns"");
      DOMNodePointer dOMNodePointer1 = new DOMNodePointer(dOMNodePointer0, element0);
      String string0 = dOMNodePointer1.asPath();
      assertEquals(""/xmlns[1]"", string0);
}",0,
JxPath,18,org.apache.commons.jxpath.ri.axes.AttributeContext_ESTest::test4,"  public void test4()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest0, true, true);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        attributeContext0.setPosition(1);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.jxpath.ri.axes.AttributeContext"", e);
      }
  }",0,
Math,66,org.apache.commons.math.optimization.univariate.BrentOptimizer_ESTest::test2,"  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-873.217716);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (-873.217716), 0.0, (-1.0));
      assertEquals(56, brentOptimizer0.getEvaluations());
}",0,"assertEquals(0, brentOptimizer0.getEvaluations())"
Math,66,org.apache.commons.math.optimization.univariate.BrentOptimizer_ESTest::test4,"  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = Double.NaN;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, 0.0, (-874.0), (-4351.645960419921));
      assertEquals(21, brentOptimizer0.getIterationCount());
}",0,"assertEquals(0, brentOptimizer0.getIterationCount())"
Math,35,org.apache.commons.math3.genetics.ElitisticListPopulation_ESTest::test0,"  public void test0()  throws Throwable  {
      LinkedList<Chromosome> linkedList0 = new LinkedList<Chromosome>();
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(linkedList0, 2144375856, 2144375856);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // elitism rate (2,144,375,856)
         //
         verifyException(""org.apache.commons.math3.genetics.ElitisticListPopulation"", e);
      }
  }",0,
Math,35,org.apache.commons.math3.genetics.ElitisticListPopulation_ESTest::test2,"  public void test2()  throws Throwable  {
      ElitisticListPopulation elitisticListPopulation0 = null;
      try {
        elitisticListPopulation0 = new ElitisticListPopulation(1905, (-146.889688));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // elitism rate (-146.89)
         //
         verifyException(""org.apache.commons.math3.genetics.ElitisticListPopulation"", e);
      }
  }",0,
Math,45,org.apache.commons.math.linear.OpenMapRealMatrix_ESTest::test3,"  public void test3()  throws Throwable  {
      OpenMapRealMatrix openMapRealMatrix0 = null;
      try {
        openMapRealMatrix0 = new OpenMapRealMatrix(2141034748, Integer.MAX_VALUE);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // 4,597,837,108,988,765,956 is larger than, or equal to, the maximum (2,147,483,647)
         //
         verifyException(""org.apache.commons.math.linear.OpenMapRealMatrix"", e);
      }
  }",0,
Math,70,org.apache.commons.math.analysis.solvers.BisectionSolver_ESTest::test2,"  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1739.0314653;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      double double0 = bisectionSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-2797.401695998948), (-1618.247285), (-1618.247285));
      assertEquals(30, bisectionSolver0.getIterationCount());
}",1,
Math,70,org.apache.commons.math.analysis.solvers.BisectionSolver_ESTest::test2,"  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1739.0314653;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      double double0 = bisectionSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-2797.401695998948), (-1618.247285), (-1618.247285));
      assertEquals((-1618.2472852745432), double0, 0.01);
}",1,
Math,70,org.apache.commons.math.analysis.solvers.BisectionSolver_ESTest::test2,"  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = 1739.0314653;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      double double0 = bisectionSolver0.solve((UnivariateRealFunction) polynomialFunction0, (-2797.401695998948), (-1618.247285), (-1618.247285));
  }",1,
Math,85,org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils_ESTest::test07,"  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4037.4646;
      doubleArray0[1] = 283.42488442;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      double[] doubleArray1 = UnivariateRealSolverUtils.bracket((UnivariateRealFunction) polynomialFunctionLagrangeForm0, 855.1881, 0.0, 938.1475384);
      assertArrayEquals(new double[] {0.0, 938.1475384}, doubleArray1, 0.01);
}",0,
Math,85,org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils_ESTest::test07,"  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4037.4646;
      doubleArray0[1] = 283.42488442;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      double[] doubleArray1 = UnivariateRealSolverUtils.bracket((UnivariateRealFunction) polynomialFunctionLagrangeForm0, 855.1881, 0.0, 938.1475384);
  }",0,
Math,94,org.apache.commons.math.util.MathUtils_ESTest::test002,"  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(1073741824, (-1216));
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException(""org.apache.commons.math.util.MathUtils"", e);
      }
  }",1,
Math,99,org.apache.commons.math.util.MathUtils_ESTest::test061,"  public void test061()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.gcd(Integer.MIN_VALUE, 0);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(-2,147,483,648, 0) is 2^31
         //
         verifyException(""org.apache.commons.math.MathRuntimeException"", e);
      }
  }",0,
Math,99,org.apache.commons.math.util.MathUtils_ESTest::test062,"  public void test062()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.gcd(0, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // overflow: gcd(0, -2,147,483,648) is 2^31
         //
         verifyException(""org.apache.commons.math.MathRuntimeException"", e);
      }
  }",0,
Math,99,org.apache.commons.math.util.MathUtils_ESTest::test081,"  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(4, Integer.MIN_VALUE);
        fail(""Expecting exception: ArithmeticException"");
      } catch(ArithmeticException e) {
         //
         // overflow: lcm is 2^31
         //
         verifyException(""org.apache.commons.math.util.MathUtils"", e);
      }
  }",1,
Math,23,org.apache.commons.math3.optimization.univariate.BrentOptimizer_ESTest::test4,"  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(2202.502669393223, 2202.502669393223);
      Logistic logistic0 = new Logistic(2202.502669393223, 2202.502669393223, 596, (-83.763), 596, 596);
      GoalType goalType0 = GoalType.MINIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(596, (UnivariateFunction) logistic0, goalType0, 2.5339783209345245E8, (double) 596, (-2207.0263));
      assertEquals((-2207.0263), univariatePointValuePair0.getPoint(), 0.01);
}",0,
Math,23,org.apache.commons.math3.optimization.univariate.BrentOptimizer_ESTest::test6,"  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(5.8015881615938497E-8, 5.8015881615938497E-8);
      Signum signum0 = new Signum();
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(2146396205, (UnivariateFunction) signum0, goalType0, 0.5469118054664329, 0.5469118054664329, 1.9017692579836876E-4);
      assertEquals(1.9017692579836876E-4, univariatePointValuePair0.getPoint(), 0.01);
}",0,
Math,23,org.apache.commons.math3.optimization.univariate.BrentOptimizer_ESTest::test7,"  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer(1972.9354295246733, 1973.80211594);
      Gaussian gaussian0 = new Gaussian(2047, 2047);
      GoalType goalType0 = GoalType.MAXIMIZE;
      UnivariatePointValuePair univariatePointValuePair0 = brentOptimizer0.optimize(1560, (UnivariateFunction) gaussian0, goalType0, (-1.9872713979884691E43), 0.06666666666666667, 0.06666666666666667);
      assertEquals(0.06666666666666667, univariatePointValuePair0.getPoint(), 0.01);
}",0,
Math,97,org.apache.commons.math.analysis.BrentSolver_ESTest::test00,"  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve((-1689.2658367652516), 1.5);
      assertEquals((-1689.2658367652516), double0, 0.01);
}",1,
Math,97,org.apache.commons.math.analysis.BrentSolver_ESTest::test00,"  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve((-1689.2658367652516), 1.5);
  }",1,
Math,97,org.apache.commons.math.analysis.BrentSolver_ESTest::test08,"  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-14;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      brentSolver0.setFunctionValueAccuracy(1.0E-14);
      double double0 = brentSolver0.solve((-859.8904), 1301.7162085317);
      assertEquals((-859.8904), double0, 0.01);
}",1,
Math,97,org.apache.commons.math.analysis.BrentSolver_ESTest::test08,"  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-14;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      brentSolver0.setFunctionValueAccuracy(1.0E-14);
      double double0 = brentSolver0.solve((-859.8904), 1301.7162085317);
  }",1,
Math,97,org.apache.commons.math.analysis.BrentSolver_ESTest::test09,"  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.0E-14;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve((-1.0), 1.0E-14);
      assertEquals(1.0E-14, double0, 0.01);
}",1,
Math,97,org.apache.commons.math.analysis.BrentSolver_ESTest::test09,"  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 1.0E-14;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(polynomialFunction0);
      double double0 = brentSolver0.solve((-1.0), 1.0E-14);
  }",1,
Math,95,org.apache.commons.math.distribution.FDistributionImpl_ESTest::test4,"  public void test4()  throws Throwable  {
      FDistributionImpl fDistributionImpl0 = new FDistributionImpl(763.683107623722, 1225.931330739);
      fDistributionImpl0.setDenominatorDegreesOfFreedom(1.0);
      double double0 = fDistributionImpl0.getInitialDomain((-942.0));
      assertEquals(1.0, double0, 0.01);
}",0,
Cli,15,org.apache.commons.cli2.commandline.WriteableCommandLineImpl_ESTest::test12,"  public void test12()  throws Throwable  {
      LinkedList<PropertyOption> linkedList0 = new LinkedList<PropertyOption>();
      PropertyOption propertyOption0 = PropertyOption.INSTANCE;
      WriteableCommandLineImpl writeableCommandLineImpl0 = new WriteableCommandLineImpl(propertyOption0, linkedList0);
      List list0 = writeableCommandLineImpl0.getOptions();
      FileValidator fileValidator0 = FileValidator.getExistingDirectoryInstance();
      ArgumentImpl argumentImpl0 = new ArgumentImpl(""[af`YR"", ""DJ;%"", 124, 124, 'I', 'I', fileValidator0, ""Option.missing.required"", list0, 124);
      writeableCommandLineImpl0.addSwitch(argumentImpl0, false);
      writeableCommandLineImpl0.addValue(argumentImpl0, ""Option.missing.required"");
      List list1 = writeableCommandLineImpl0.getValues((Option) argumentImpl0, (List) list0);
      assertEquals(2, list1.size());
}",0,"assertEquals(1, list1.size())"
Cli,25,org.apache.commons.cli.HelpFormatter_ESTest::test26,"  public void test26()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      StringBuffer stringBuffer0 = new StringBuffer();
      Options options0 = new Options();
      Options options1 = options0.addOption(""t"", false, ""--"");
      helpFormatter0.renderOptions(stringBuffer0, 68, options1, 144, 1);
      assertEquals(37, stringBuffer0.length());
}",0,
Cli,25,org.apache.commons.cli.HelpFormatter_ESTest::test28,"  public void test28()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""arg"");
      helpFormatter0.printWrapped((PrintWriter) mockPrintWriter0, 0, ""[ Options: [ short "");
  }",0,
Cli,29,org.apache.commons.cli.Util_ESTest::test6,"  public void test6()  throws Throwable  {
      String string0 = Util.stripLeadingAndTrailingQuotes(""\""qDxD_5>q,)`dEgM"");
      assertEquals(""\""qDxD_5>q,)`dEgM"", string0);
}",0,
Cli,29,org.apache.commons.cli.Util_ESTest::test8,"  public void test8()  throws Throwable  {
      String string0 = Util.stripLeadingAndTrailingQuotes(""\""\"" |B_#\"""");
      assertEquals(""\""\"" |B_#\"""", string0);
}",0,
Cli,24,org.apache.commons.cli.HelpFormatter_ESTest::test32,"  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""opt contains illegal character value '"");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, ""opt contains illegal character value '"");
      assertEquals(74, helpFormatter0.defaultWidth);
}",0,
Cli,24,org.apache.commons.cli.HelpFormatter_ESTest::test32,"  public void test32()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""opt contains illegal character value '"");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 8, ""opt contains illegal character value '"");
  }",0,
Cli,40,org.apache.commons.cli.TypeHandler_ESTest::test10,"  public void test10()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      try { 
        TypeHandler.createValue(""uo7{tEV1yjof"", class0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // Unable to handle the class: class java.lang.Integer
         //
         verifyException(""org.apache.commons.cli.TypeHandler"", e);
      }
  }",0,
Cli,5,org.apache.commons.cli.Util_ESTest::test2,"  public void test2()  throws Throwable  {
      String string0 = Util.stripLeadingHyphens((String) null);
      assertNull(string0);
}",1,
Cli,5,org.apache.commons.cli.Util_ESTest::test2,"  public void test2()  throws Throwable  {
      String string0 = Util.stripLeadingHyphens((String) null);
  }",1,
Cli,8,org.apache.commons.cli.HelpFormatter_ESTest::test27,"  public void test27()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(""-"");
      helpFormatter0.printUsage((PrintWriter) mockPrintWriter0, 0, ""[ Options: [ sh6ort "");
  }",0,
Cli,32,org.apache.commons.cli.HelpFormatter_ESTest::test24,"  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, ""\n"", ""\n"", options0, ""6i4?l"");
      assertEquals(""--"", helpFormatter0.getLongOptPrefix());
}",0,assertNotNull(helpFormatter0.getLongOptPrefix())
Cli,32,org.apache.commons.cli.HelpFormatter_ESTest::test24,"  public void test24()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, ""\n"", ""\n"", options0, ""6i4?l"");
  }",0,
Cli,32,org.apache.commons.cli.HelpFormatter_ESTest::test25,"  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, ""-<e6=M|IgIm9wEy]?Rk"", "" "", options0, "" "");
      assertEquals(74, helpFormatter0.defaultWidth);
}",0,
Cli,32,org.apache.commons.cli.HelpFormatter_ESTest::test25,"  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, ""-<e6=M|IgIm9wEy]?Rk"", "" "", options0, "" "");
      assertEquals(3, helpFormatter0.defaultDescPad);
}",0,
Cli,32,org.apache.commons.cli.HelpFormatter_ESTest::test25,"  public void test25()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(2, ""-<e6=M|IgIm9wEy]?Rk"", "" "", options0, "" "");
  }",0,
Cli,34,org.apache.commons.cli.Option_ESTest::test09,"  public void test09()  throws Throwable  {
      Option option0 = new Option("""", """", true, ""'"");
      Object object0 = option0.getType();
      assertNotNull(object0);
}",0,assertNotNull(object0)
Cli,34,org.apache.commons.cli.Option_ESTest::test23,"  public void test23()  throws Throwable  {
      Option option0 = new Option("""", """");
      option0.setArgs((-2));
      String string0 = option0.toString();
      assertEquals(""[ option:  [ARG...] ::  :: class java.lang.String ]"", string0);
}",0,
Cli,34,org.apache.commons.cli.Option_ESTest::test33,"  public void test33()  throws Throwable  {
      Option option0 = new Option("""", ""X84U-w?C*"", true, """");
      String string0 = option0.toString();
      assertEquals(""[ option:  X84U-w?C*  [ARG] ::  :: class java.lang.String ]"", string0);
}",0,
Cli,34,org.apache.commons.cli.Option_ESTest::test34,"  public void test34()  throws Throwable  {
      Option option0 = new Option("""", """");
      String string0 = option0.toString();
      assertEquals(""[ option:   ::  :: class java.lang.String ]"", string0);
}",0,
Cli,23,org.apache.commons.cli.HelpFormatter_ESTest::test29,"  public void test29()  throws Throwable  {
      HelpFormatter helpFormatter0 = new HelpFormatter();
      Options options0 = new Options();
      helpFormatter0.printHelp(1, ""\n"", ""arg"", options0, ""--"");
  }",0,
Cli,31,org.apache.commons.cli.Option_ESTest::test20,"  public void test20()  throws Throwable  {
      Option option0 = new Option(""4"", ""4"");
      boolean boolean0 = option0.hasArgName();
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
Cli,17,org.apache.commons.cli.PosixParser_ESTest::test3,"  public void test3()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""-ub\""vdz(*j"";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(3, stringArray1.length);
}",0,
Cli,22,org.apache.commons.cli.PosixParser_ESTest::test1,"  public void test1()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ""-PE---"";
      stringArray0[1] = """";
      stringArray0[2] = """";
      stringArray0[3] = ""A CloneNotSupportedExceptionwas thown: "";
      stringArray0[4] = ""--eA_{'~R[w=`"";
      // Undeclared exception!
      try { 
        posixParser0.flatten(options0, stringArray0, false);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
      }
  }",0,
Cli,22,org.apache.commons.cli.PosixParser_ESTest::test4,"  public void test4()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      options0.addOption(""P"", true, ""T"");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ""-PE---"";
      stringArray0[1] = ""-8"";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      String[] stringArray2 = posixParser0.flatten(options0, stringArray1, true);
      assertEquals(5, stringArray2.length);
}",0,
Cli,18,org.apache.commons.cli.PosixParser_ESTest::test4,"  public void test4()  throws Throwable  {
      PosixParser posixParser0 = new PosixParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ""- "";
      String[] stringArray1 = posixParser0.flatten(options0, stringArray0, true);
      assertEquals(2, stringArray1.length);
}",0,
Csv,12,org.apache.commons.csv.CSVFormat_ESTest::test11,"  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('q');
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
Csv,12,org.apache.commons.csv.CSVFormat_ESTest::test23,"  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker('y');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
Csv,12,org.apache.commons.csv.CSVFormat_ESTest::test29,"  public void test29()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      CSVFormat cSVFormat1 = cSVFormat0.withNullString(""The comment start and the escape character cannot be the same ('"");
      cSVFormat1.equals(cSVFormat0);
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
Csv,12,org.apache.commons.csv.CSVFormat_ESTest::test33,"  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ""The header contains a duplicate entry: '"";
      stringArray0[2] = ""c[0TyZhMn}#&:L"";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.format(stringArray0);
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
Csv,12,org.apache.commons.csv.CSVFormat_ESTest::test35,"  public void test35()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      CSVFormat cSVFormat1 = cSVFormat0.EXCEL.withNullString("""");
      cSVFormat1.hashCode();
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
Csv,12,org.apache.commons.csv.CSVFormat_ESTest::test40,"  public void test40()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.EXCEL;
      String[] stringArray0 = new String[3];
      stringArray0[1] = ""The header contains a duplicate entry: '"";
      stringArray0[2] = ""c[0TyZhMn}#&:L"";
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = cSVFormat1.toString();
      assertTrue(cSVFormat1.getAllowMissingColumnNames());
}",0,assertFalse(cSVFormat1.getAllowMissingColumnNames())
Csv,8,org.apache.commons.csv.CSVFormat_ESTest::test12,"  public void test12()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        cSVFormat0.DEFAULT.withHeader(stringArray0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // The header contains a duplicate entry: 'null' in [null, null, null, null]
         //
         verifyException(""org.apache.commons.csv.CSVFormat"", e);
      }
  }",0,
Csv,13,org.apache.commons.csv.CSVFormat_ESTest::test02,"  public void test02()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      QuoteMode quoteMode0 = QuoteMode.MINIMAL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuoteMode(quoteMode0);
      cSVFormat1.hashCode();
      assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
Csv,13,org.apache.commons.csv.CSVFormat_ESTest::test11,"  public void test11()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withIgnoreEmptyLines();
      assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
Csv,13,org.apache.commons.csv.CSVFormat_ESTest::test21,"  public void test21()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withQuote('c');
      boolean boolean0 = cSVFormat0.equals(cSVFormat1);
      assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
Csv,13,org.apache.commons.csv.CSVFormat_ESTest::test23,"  public void test23()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      boolean boolean0 = cSVFormat1.equals(cSVFormat0);
      assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
Csv,13,org.apache.commons.csv.CSVFormat_ESTest::test25,"  public void test25()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      Character character0 = Character.valueOf('8');
      CSVFormat cSVFormat1 = cSVFormat0.withCommentMarker(character0);
      CSVFormat cSVFormat2 = cSVFormat1.withEscape('?');
      boolean boolean0 = cSVFormat1.equals(cSVFormat2);
      assertEquals(""\\N"", cSVFormat2.getNullString());
}",0,assertNotNull(cSVFormat2.getNullString())
Csv,13,org.apache.commons.csv.CSVFormat_ESTest::test33,"  public void test33()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      CSVFormat cSVFormat1 = cSVFormat0.withRecordSeparator('$');
      cSVFormat0.equals(cSVFormat1);
      assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
Csv,13,org.apache.commons.csv.CSVFormat_ESTest::test34,"  public void test34()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      cSVFormat1.getHeader();
      assertEquals(""\\N"", cSVFormat1.getNullString());
}",0,assertNotNull(cSVFormat1.getNullString())
Csv,13,org.apache.commons.csv.CSVFormat_ESTest::test45,"  public void test45()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.MYSQL;
      String[] stringArray0 = new String[0];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      String string0 = cSVFormat1.toString();
      assertEquals(""Delimiter=<\t> Escape=<\\> NullString=<\\N> RecordSeparator=<\n> SkipHeaderRecord:false Header:[]"", string0);
}",0,
Csv,10,org.apache.commons.csv.CSVPrinter_ESTest::test09,"  public void test09()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.TDF;
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat1 = cSVFormat0.withHeader(stringArray0);
      Quote quote0 = Quote.NON_NUMERIC;
      CSVFormat cSVFormat2 = cSVFormat1.withQuotePolicy(quote0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        cSVFormat2.print(pipedWriter0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException(""java.io.PipedWriter"", e);
      }
  }",0,
Csv,6,org.apache.commons.csv.CSVRecord_ESTest::test17,"  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(854);
      hashMap0.put((String) null, integer0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 854);
      cSVRecord0.toMap();
      assertEquals(854L, cSVRecord0.getRecordNumber());
}",0,"assertEquals(0, cSVRecord0.getRecordNumber())"
Csv,6,org.apache.commons.csv.CSVRecord_ESTest::test17,"  public void test17()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(854);
      hashMap0.put((String) null, integer0);
      String[] stringArray0 = new String[0];
      CSVRecord cSVRecord0 = new CSVRecord(stringArray0, hashMap0, (String) null, 854);
      cSVRecord0.toMap();
  }",0,
Csv,3,org.apache.commons.csv.Lexer_ESTest::test07,"  public void test07()  throws Throwable  {
      CSVFormat cSVFormat0 = CSVFormat.DEFAULT;
      StringReader stringReader0 = new StringReader(""QU,rs$@LR&/"");
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
      cSVLexer0.readEscape();
      int int0 = cSVLexer0.readEscape();
      assertEquals((-1), int0);
}",0,
Csv,3,org.apache.commons.csv.Lexer_ESTest::test10,"  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader(""org.apache.commons.csv.CSVLexer"");
      Character character0 = new Character('\'');
      Quote quote0 = Quote.ALL;
      Character character1 = new Character('a');
      String[] stringArray0 = new String[1];
      CSVFormat cSVFormat0 = new CSVFormat('$', character0, quote0, character1, character0, false, true, ""org.apache.commons.csv.CSVLexer"", (String) null, stringArray0);
      ExtendedBufferedReader extendedBufferedReader0 = new ExtendedBufferedReader(stringReader0);
      CSVLexer cSVLexer0 = new CSVLexer(cSVFormat0, extendedBufferedReader0);
      cSVLexer0.readEscape();
      int int0 = cSVLexer0.readEscape();
      int int1 = cSVLexer0.readEscape();
      assertEquals((-1), int1);
}",0,"assertEquals(0, int1)"
Codec,4,org.apache.commons.codec.binary.Base64_ESTest::test00,"  public void test00()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ONE;
      byte[] byteArray0 = Base64.encodeInteger(bigInteger0);
      Base64 base64_0 = new Base64();
      byte[] byteArray1 = base64_0.encode(byteArray0);
      int int0 = base64_0.readResults(byteArray1, (byte)90, (byte) (-1));
      assertArrayEquals(new byte[] {(byte)81, (byte)86, (byte)69, (byte)57, (byte)80, (byte)81, (byte)61, (byte)61}, byteArray1);
}",0,
Codec,12,org.apache.commons.codec.binary.BaseNCodecInputStream_ESTest::test09,"  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, 597);
      Base64 base64_0 = new Base64(597);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, false);
      // Undeclared exception!
      try { 
        baseNCodecInputStream0.skip((-3161L));
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Negative skip length
         //
         verifyException(""org.apache.commons.codec.binary.BaseNCodecInputStream"", e);
      }
  }",0,
Codec,12,org.apache.commons.codec.binary.BaseNCodecInputStream_ESTest::test10,"  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4096, 597);
      Base64 base64_0 = new Base64((-2146420536));
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base64_0, true);
      long long0 = baseNCodecInputStream0.skip(597);
      assertEquals(0L, long0);
}",0,"assertEquals(0, long0)"
Codec,12,org.apache.commons.codec.binary.BaseNCodecInputStream_ESTest::test11,"  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base32 base32_0 = new Base32();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      int int0 = baseNCodecInputStream0.available();
      assertEquals(1, int0);
}",0,"assertEquals(0, int0)"
Codec,12,org.apache.commons.codec.binary.BaseNCodecInputStream_ESTest::test12,"  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Base32 base32_0 = new Base32();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      base32_0.encodeToString(byteArray0);
      BaseNCodecInputStream baseNCodecInputStream0 = new BaseNCodecInputStream(byteArrayInputStream0, base32_0, false);
      int int0 = baseNCodecInputStream0.available();
      assertEquals(0, int0);
}",0,"assertEquals(1, int0)"
Codec,11,org.apache.commons.codec.net.QuotedPrintableCodec_ESTest::test04,"  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)9;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      byte[] byteArray1 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray0);
      byte[] byteArray2 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray1);
      byte[] byteArray3 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
      assertEquals(90, byteArray3.length);
}",0,
Codec,11,org.apache.commons.codec.net.QuotedPrintableCodec_ESTest::test05,"  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)9;
      byteArray0[8] = (byte)16;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      byte[] byteArray1 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray0);
      byte[] byteArray2 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray1);
      byte[] byteArray3 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
      byte[] byteArray4 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray3);
      assertEquals(166, byteArray4.length);
}",0,
Codec,11,org.apache.commons.codec.net.QuotedPrintableCodec_ESTest::test06,"  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte)1;
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)9;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      BitSet bitSet0 = BitSet.valueOf(byteBuffer0);
      byte[] byteArray1 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray0);
      byte[] byteArray2 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray1);
      byte[] byteArray3 = QuotedPrintableCodec.encodeQuotedPrintable(bitSet0, byteArray2);
      assertEquals(80, byteArray3.length);
}",0,
Codec,11,org.apache.commons.codec.net.QuotedPrintableCodec_ESTest::test07,"  public void test07()  throws Throwable  {
      QuotedPrintableCodec quotedPrintableCodec0 = new QuotedPrintableCodec();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte)9;
      byte[] byteArray1 = quotedPrintableCodec0.encode(byteArray0);
      assertEquals(12, byteArray1.length);
}",0,
Codec,11,org.apache.commons.codec.net.QuotedPrintableCodec_ESTest::test09,"  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)13;
      byte[] byteArray1 = QuotedPrintableCodec.decodeQuotedPrintable(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
}",1,
Codec,11,org.apache.commons.codec.net.QuotedPrintableCodec_ESTest::test09,"  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)13;
      byte[] byteArray1 = QuotedPrintableCodec.decodeQuotedPrintable(byteArray0);
  }",1,
Codec,11,org.apache.commons.codec.net.QuotedPrintableCodec_ESTest::test10,"  public void test10()  throws Throwable  {
      QuotedPrintableCodec quotedPrintableCodec0 = new QuotedPrintableCodec();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)13;
      byte[] byteArray1 = quotedPrintableCodec0.decode(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
}",1,
Codec,11,org.apache.commons.codec.net.QuotedPrintableCodec_ESTest::test11,"  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)10;
      byte[] byteArray1 = QuotedPrintableCodec.decodeQuotedPrintable(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
}",1,
Codec,18,org.apache.commons.codec.binary.StringUtils_ESTest::test19,"  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) ""\uFFFD"");
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
Codec,18,org.apache.commons.codec.binary.StringUtils_ESTest::test19,"  public void test19()  throws Throwable  {
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) ""\uFFFD"");
  }",0,
Jsoup,52,org.jsoup.nodes.XmlDeclaration_ESTest::test1,"  public void test1()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""t4N7&Q"", ""NW91EkPm "", false);
      String string0 = xmlDeclaration0.toString();
      assertEquals(""<?t4N7&Q?>"", string0);
}",0,assertNotNull(string0)
Jsoup,52,org.jsoup.nodes.XmlDeclaration_ESTest::test2,"  public void test2()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(""n/(:P!,Rl&n<F63$O"", ""n/(:P!,Rl&n<F63$O"", false);
      String string0 = xmlDeclaration0.getWholeDeclaration();
      assertEquals("""", string0);
}",0,
Jsoup,52,org.jsoup.nodes.XmlDeclaration_ESTest::test3,"  public void test3()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("""", """", true);
      String string0 = xmlDeclaration0.toString();
      assertEquals(""<!!>"", string0);
}",0,assertNotNull(string0)
Jsoup,4,org.jsoup.nodes.Entities_ESTest::test3,"  public void test3()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      String string0 = Entities.escape(""Fo%^]N={*!BXG'NZQ"", charsetEncoder0, entities_EscapeMode0);
      assertEquals(""Fo&percnt;&Hat;&rsqb;N&equals;&lcub;&midast;&excl;BXG&apos;NZQ"", string0);
}",0,assertNotNull(string0)
Jsoup,4,org.jsoup.nodes.Entities_ESTest::test4,"  public void test4()  throws Throwable  {
      String string0 = Entities.unescape(""Fo&percnt;&Hat;&rsqb;N&equals;&lcub;&midast;&excl;BXG&apos;NZQ"");
      assertEquals(""Fo%^]N={*!BXG'NZQ"", string0);
}",0,
Jsoup,30,org.jsoup.safety.Cleaner_ESTest::test0,"  public void test0()  throws Throwable  {
      Whitelist whitelist0 = new Whitelist();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = Document.createShell(""org.jsoup.safeG Cleae$IlanrngVisitor"");
      whitelist0.addEnforcedAttribute(""body"", ""<html>\n <head></head>\n <body></body>\n</html>"", ""org.jsoup.safeG Cleae$IlanrngVisitor"");
      Document document1 = cleaner0.clean(document0);
      boolean boolean0 = cleaner0.isValid(document1);
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
Jsoup,47,org.jsoup.nodes.Entities_ESTest::test10,"  public void test10()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Entities.escape(stringBuilder0, ""]?`?<DQr@*K"", document_OutputSettings0, true, true, true);
      assertEquals(""]?`?&lt;DQr@*K"", stringBuilder0.toString());
}",0,assertNotNull(stringBuilder0.toString())
Jsoup,86,org.jsoup.nodes.Comment_ESTest::test6,"  public void test6()  throws Throwable  {
      Comment comment0 = new Comment(""')GQz^]r=Tof"");
      comment0.asXmlDeclaration();
      assertEquals(""#comment"", comment0.nodeName());
}",0,assertNotNull(comment0.nodeName())
Jsoup,86,org.jsoup.nodes.Comment_ESTest::test6,"  public void test6()  throws Throwable  {
      Comment comment0 = new Comment(""')GQz^]r=Tof"");
      comment0.asXmlDeclaration();
  }",0,
Jsoup,88,org.jsoup.nodes.Attribute_ESTest::test04,"  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute(""\""s:O<.p~\n~In\""ka,"", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertEquals("""", attribute1.getValue());
}",0,assertNotNull(attribute1.getValue())
Jsoup,88,org.jsoup.nodes.Attribute_ESTest::test20,"  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute(""\""s:O<.p~\n~In\""ka,"", (String) null);
      boolean boolean0 = attribute0.equals(attribute0);
      assertEquals("""", attribute0.getValue());
}",0,assertNotNull(attribute0.getValue())
Jsoup,88,org.jsoup.nodes.Attribute_ESTest::test25,"  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute(""7b([!ve"", (String) null);
      attribute0.hashCode();
      assertEquals("""", attribute0.getValue());
}",0,assertNotNull(attribute0.getValue())
Jsoup,79,org.jsoup.nodes.LeafNode_ESTest::test2,"  public void test2()  throws Throwable  {
      DataNode dataNode0 = new DataNode(""trJ"");
      Node[] nodeArray0 = dataNode0.childNodesAsArray();
      assertEquals(0, nodeArray0.length);
}",0,
Jsoup,79,org.jsoup.nodes.LeafNode_ESTest::test2,"  public void test2()  throws Throwable  {
      DataNode dataNode0 = new DataNode(""trJ"");
      Node[] nodeArray0 = dataNode0.childNodesAsArray();
  }",0,
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test07,"  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute(""6xZW/$Zc"", ""6xZW/$Zc"");
      attribute0.setValue((String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("""", attribute0.getValue());
}",0,assertNotNull(attribute0.getValue())
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test07,"  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute(""6xZW/$Zc"", ""6xZW/$Zc"");
      attribute0.setValue((String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
}",0,assertTrue(boolean0)
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test07,"  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute(""6xZW/$Zc"", ""6xZW/$Zc"");
      attribute0.setValue((String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
  }",0,
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test18,"  public void test18()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(""9"", ""9"");
      attribute0.setValue((String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("""", attribute0.getValue());
}",0,assertNotNull(attribute0.getValue())
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test18,"  public void test18()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(""9"", ""9"");
      attribute0.setValue((String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
}",0,assertTrue(boolean0)
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test18,"  public void test18()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(""9"", ""9"");
      attribute0.setValue((String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
  }",0,
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test24,"  public void test24()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(""9"", ""9"");
      Attribute attribute1 = attribute0.clone();
      attribute1.setValue((String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      assertEquals("""", attribute1.getValue());
}",0,assertNotNull(attribute1.getValue())
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test24,"  public void test24()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(""9"", ""9"");
      Attribute attribute1 = attribute0.clone();
      attribute1.setValue((String) null);
      boolean boolean0 = attribute1.equals(attribute0);
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test24,"  public void test24()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(""9"", ""9"");
      Attribute attribute1 = attribute0.clone();
      attribute1.setValue((String) null);
      boolean boolean0 = attribute1.equals(attribute0);
  }",0,
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test26,"  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute(""6xZW/$Zc"", ""6xZW/$Zc"");
      attribute0.setValue((String) null);
      attribute0.hashCode();
      assertEquals("""", attribute0.getValue());
}",0,assertNotNull(attribute0.getValue())
Jsoup,89,org.jsoup.nodes.Attribute_ESTest::test26,"  public void test26()  throws Throwable  {
      Attribute attribute0 = new Attribute(""6xZW/$Zc"", ""6xZW/$Zc"");
      attribute0.setValue((String) null);
      attribute0.hashCode();
  }",0,
Jsoup,40,org.jsoup.nodes.DocumentType_ESTest::test2,"  public void test2()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      DocumentType documentType0 = new DocumentType("""", ""#doctype"", ""2oULXUb#K<| k8g"", """");
      documentType0.outerHtmlHead(stringBuilder0, (-4119), document_OutputSettings0);
      assertEquals(""<!DOCTYPE PUBLIC \""#doctype\"" \""2oULXUb#K<| k8g\"">"", stringBuilder0.toString());
}",0,assertNotNull(stringBuilder0.toString())
Jsoup,40,org.jsoup.nodes.DocumentType_ESTest::test2,"  public void test2()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      DocumentType documentType0 = new DocumentType("""", ""#doctype"", ""2oULXUb#K<| k8g"", """");
      documentType0.outerHtmlHead(stringBuilder0, (-4119), document_OutputSettings0);
  }",0,
Jsoup,36,org.jsoup.helper.DataUtil_ESTest::test13,"  public void test13()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType(""charset="");
      assertNull(string0);
}",0,
Jsoup,36,org.jsoup.helper.DataUtil_ESTest::test13,"  public void test13()  throws Throwable  {
      String string0 = DataUtil.getCharsetFromContentType(""charset="");
  }",0,
Jsoup,5,org.jsoup.parser.Parser_ESTest::test00,"  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(""P%PBc.(\""(3d<f=dP@J"", ""P%PBc.(\""(3d<f=dP@J"");
      assertEquals(""#document"", document0.nodeName());
}",0,assertNotNull(document0.nodeName())
Jsoup,5,org.jsoup.parser.Parser_ESTest::test00,"  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(""P%PBc.(\""(3d<f=dP@J"", ""P%PBc.(\""(3d<f=dP@J"");
  }",0,
Jsoup,8,org.jsoup.nodes.Node_ESTest::test08,"  public void test08()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded(""Y3RuM2Iw}~sa=Np}"", """");
      String string0 = dataNode0.toString();
      assertEquals(""Y3RuM2Iw}~sa=Np}"", string0);
}",0,assertNotNull(string0)
Jsoup,8,org.jsoup.nodes.Node_ESTest::test08,"  public void test08()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded(""Y3RuM2Iw}~sa=Np}"", """");
      String string0 = dataNode0.toString();
  }",0,
Jsoup,16,org.jsoup.nodes.DocumentType_ESTest::test0,"  public void test0()  throws Throwable  {
      DocumentType documentType0 = new DocumentType(""/:u'$8-DkwD}/:5"", ""/:u'$8-DkwD}/:5"", ""/:u'$8-DkwD}/:5"", ""/:u'$8-DkwD}/:5"");
      String string0 = documentType0.outerHtml();
      assertEquals(""<!DOCTYPE /:u'$8-DkwD}/:5 PUBLIC \""/:u'$8-DkwD}/:5\"" \""/:u'$8-DkwD}/:5\"">"", string0);
}",0,assertNotNull(string0)
Jsoup,16,org.jsoup.nodes.DocumentType_ESTest::test1,"  public void test1()  throws Throwable  {
      DocumentType documentType0 = new DocumentType(""ygL0pop.]WM:R$swY0g"", ""ygL0pop.]WM:R$swY0g"", ""ygL0pop.]WM:R$swY0g"", ""s)XlM.FRp.@;D$"");
      Attributes attributes0 = new Attributes();
      documentType0.attributes = attributes0;
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      documentType0.outerHtmlHead(stringBuilder0, 1, document_OutputSettings0);
      assertEquals(""<!DOCTYPE >"", stringBuilder0.toString());
}",0,assertNotNull(stringBuilder0.toString())
Jsoup,60,org.jsoup.parser.TokenQueue_ESTest::test05,"  public void test05()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(""'N7N;gmEL"");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('\'', '\'');
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced maker at N7N;gmEL
         //
         verifyException(""org.jsoup.helper.Validate"", e);
      }
  }",0,
Jsoup,60,org.jsoup.parser.TokenQueue_ESTest::test24,"  public void test24()  throws Throwable  {
      TokenQueue tokenQueue0 = new TokenQueue(""heCIIhcb$o"");
      // Undeclared exception!
      try { 
        tokenQueue0.chompBalanced('h', 'h');
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Did not find balanced maker at eCIIhcb$o
         //
         verifyException(""org.jsoup.helper.Validate"", e);
      }
  }",0,
Jsoup,41,org.jsoup.nodes.Element_ESTest::test69,"  public void test69()  throws Throwable  {
      Document document0 = new Document(""value"");
      Document document1 = new Document("">5Z"");
      boolean boolean0 = document0.equals(document1);
      assertTrue(boolean0);
}",0,assertTrue(boolean0)
Jsoup,34,org.jsoup.parser.CharacterReader_ESTest::test12,"  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(""8Kr':%(6-\""p@8&Z_$8"");
      boolean boolean0 = characterReader0.containsIgnoreCase(""8Kr':%(6-\""p@8&Z_$8"");
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
Jsoup,34,org.jsoup.parser.CharacterReader_ESTest::test12,"  public void test12()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(""8Kr':%(6-\""p@8&Z_$8"");
      boolean boolean0 = characterReader0.containsIgnoreCase(""8Kr':%(6-\""p@8&Z_$8"");
  }",0,
Jsoup,26,org.jsoup.safety.Cleaner_ESTest::test0,"  public void test0()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("")}IYN&vF+R/bSRCs bc"");
      Document document1 = cleaner0.clean(document0);
      assertNotSame(document1, document0);
}",0,
Jsoup,26,org.jsoup.safety.Cleaner_ESTest::test0,"  public void test0()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(whitelist0);
      Document document0 = new Document("")}IYN&vF+R/bSRCs bc"");
      Document document1 = cleaner0.clean(document0);
  }",0,
Jsoup,19,org.jsoup.safety.Whitelist_ESTest::test10,"  public void test10()  throws Throwable  {
      Whitelist whitelist0 = Whitelist.basicWithImages();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ""cite"";
      stringArray0[1] = ""h5WK''"";
      stringArray0[2] = ""h5WK''"";
      Whitelist whitelist1 = whitelist0.addAttributes(""cite"", stringArray0);
      Document document0 = new Document(""h5WK''"");
      Attribute attribute0 = Attribute.createFromEncoded(""cite"", ""http:h5wk''"");
      boolean boolean0 = whitelist1.isSafeAttribute(""cite"", document0, attribute0);
      assertTrue(boolean0);
}",0,assertTrue(boolean0)
Jsoup,83,org.jsoup.parser.CharacterReader_ESTest::test31,"  public void test31()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(""<A)s.2T#T`V"");
      String string0 = characterReader0.consumeTagName();
      assertEquals(0, characterReader0.pos());
}",0,"assertEquals(0, characterReader0.pos())"
Jsoup,18,org.jsoup.parser.CharacterReader_ESTest::test14,"  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(""J"");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""J"");
      characterReader0.consumeTo('J');
      assertEquals("""", characterReader0.toString());
}",0,assertNotNull(characterReader0.toString())
Jsoup,18,org.jsoup.parser.CharacterReader_ESTest::test14,"  public void test14()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(""J"");
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase(""J"");
      characterReader0.consumeTo('J');
  }",0,
Jsoup,59,org.jsoup.parser.Token_ESTest::test33,"  public void test33()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeName("""");
      token_EndTag0.newAttribute();
  }",0,
Compress,27,org.apache.commons.compress.archivers.tar.TarUtils_ESTest::test00,"  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(0L, byteArray0, (byte)1, (byte)1);
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)1, 2);
      assertArrayEquals(new byte[] {(byte)48, (byte)32, (byte)0, (byte)0}, byteArray0);
}",0,
Compress,27,org.apache.commons.compress.archivers.tar.TarUtils_ESTest::test00,"  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(0L, byteArray0, (byte)1, (byte)1);
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)1, 2);
      assertEquals(0L, long0);
}",0,
Compress,27,org.apache.commons.compress.archivers.tar.TarUtils_ESTest::test00,"  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(0L, byteArray0, (byte)1, (byte)1);
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, (byte)1, 2);
  }",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test22,"  public void test22()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      zipArchiveOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
}",1,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertTrue(mockFile0.exists());
}",0,assertTrue(mockFile0.exists())
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(""bad CRC checksum for entry "", mockFile0.toString());
}",0,assertNotNull(mockFile0.toString())
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertFalse(mockFile0.isDirectory());
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(0L, mockFile0.getFreeSpace());
}",0,"assertEquals(0, mockFile0.getFreeSpace())"
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertNull(mockFile0.getParent());
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertFalse(mockFile0.isHidden());
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(0L, mockFile0.getUsableSpace());
}",0,"assertEquals(0, mockFile0.getUsableSpace())"
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertTrue(mockFile0.canExecute());
}",0,assertTrue(mockFile0.canExecute())
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(""bad CRC checksum for entry "", mockFile0.getName());
}",0,assertNotNull(mockFile0.getName())
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertTrue(mockFile0.canRead());
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertTrue(mockFile0.canWrite());
}",0,assertTrue(mockFile0.canWrite())
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertTrue(mockFile0.isFile());
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(0L, mockFile0.getTotalSpace());
}",0,"assertEquals(0, mockFile0.getTotalSpace())"
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(1392409281320L, mockFile0.lastModified());
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(0L, mockFile0.length());
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertFalse(mockFile0.isAbsolute());
}",0,assertTrue(mockFile0.isAbsolute())
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertTrue(zipArchiveOutputStream0.isSeekable());
}",0,assertFalse(zipArchiveOutputStream0.isSeekable())
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(""UTF8"", zipArchiveOutputStream0.getEncoding());
}",0,assertNotNull(zipArchiveOutputStream0.getEncoding())
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(2048, ZipArchiveOutputStream.EFS_FLAG);
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(0, ZipArchiveOutputStream.STORED);
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals((-1), ZipArchiveOutputStream.DEFAULT_COMPRESSION);
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
      assertEquals(8, ZipArchiveOutputStream.DEFLATED);
}",0,
Compress,4,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test23,"  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile(""bad CRC checksum for entry "");
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(mockFile0);
      zipArchiveOutputStream0.close();
  }",0,
Compress,4,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream_ESTest::test10,"  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short)8);
      cpioArchiveOutputStream0.close();
      assertEquals(0, byteArrayOutputStream0.size());
}",0,"assertEquals(0, byteArrayOutputStream0.size())"
Compress,4,org.apache.commons.compress.changes.ChangeSetPerformer_ESTest::test0,"  public void test0()  throws Throwable  {
      ChangeSet changeSet0 = new ChangeSet();
      JarArchiveOutputStream jarArchiveOutputStream0 = new JarArchiveOutputStream((OutputStream) null);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 190);
      changeSet0.deleteDir("""");
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0, ""m"", false);
      ChangeSetPerformer changeSetPerformer0 = new ChangeSetPerformer(changeSet0);
      // Undeclared exception!
      try { 
        changeSetPerformer0.perform(zipArchiveInputStream0, jarArchiveOutputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream"", e);
      }
  }",0,
Compress,44,org.apache.commons.compress.utils.ChecksumCalculatingInputStream_ESTest::test2,"  public void test2()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = null;
      try {
        checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream((Checksum) null, mockFileInputStream0);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Parameter checksum must not be null
         //
         verifyException(""org.apache.commons.compress.utils.ChecksumCalculatingInputStream"", e);
      }
  }",0,
Compress,44,org.apache.commons.compress.utils.ChecksumCalculatingInputStream_ESTest::test3,"  public void test3()  throws Throwable  {
      Adler32 adler32_0 = new Adler32();
      ChecksumCalculatingInputStream checksumCalculatingInputStream0 = null;
      try {
        checksumCalculatingInputStream0 = new ChecksumCalculatingInputStream(adler32_0, (InputStream) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // Parameter in must not be null
         //
         verifyException(""org.apache.commons.compress.utils.ChecksumCalculatingInputStream"", e);
      }
  }",0,
Compress,46,org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp_ESTest::test27,"  public void test27()  throws Throwable  {
      X5455_ExtendedTimestamp x5455_ExtendedTimestamp0 = new X5455_ExtendedTimestamp();
      MockDate mockDate0 = new MockDate((-2), (byte)2, (byte)2);
      // Undeclared exception!
      try { 
        x5455_ExtendedTimestamp0.setModifyJavaTime(mockDate0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // X5455 timestamps must fit in a signed 32 bit integer: -2266876800
         //
         verifyException(""org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp"", e);
      }
  }",0,
Compress,29,org.apache.commons.compress.archivers.ArchiveStreamFactory_ESTest::test28,"  public void test28()  throws Throwable  {
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory("""");
      MockPrintStream mockPrintStream0 = new MockPrintStream(""arj"");
      // Undeclared exception!
      try { 
        archiveStreamFactory0.createArchiveOutputStream(""jar"", mockPrintStream0);
        fail(""Expecting exception: IllegalCharsetNameException"");
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException(""java.nio.charset.Charset"", e);
      }
  }",1,
Compress,24,org.apache.commons.compress.archivers.tar.TarUtils_ESTest::test10,"  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      // Undeclared exception!
      try { 
        TarUtils.parseOctal(byteArray0, 2, 2);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid byte 32 at offset 2 in '  ' len=2
         //
         verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
      }
  }",0,
Compress,9,org.apache.commons.compress.archivers.tar.TarArchiveOutputStream_ESTest::test07,"  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile(""Ou{e 6;.kh"", ""Ou{e 6;.kh"");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      TarArchiveOutputStream tarArchiveOutputStream0 = new TarArchiveOutputStream(mockPrintStream0);
      tarArchiveOutputStream0.close();
      tarArchiveOutputStream0.close();
      assertEquals(10240L, tarArchiveOutputStream0.getBytesWritten());
}",0,"assertEquals(0, tarArchiveOutputStream0.getBytesWritten())"
Compress,11,org.apache.commons.compress.archivers.ArchiveStreamFactory_ESTest::test16,"  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[179];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArchiveStreamFactory archiveStreamFactory0 = new ArchiveStreamFactory();
      try { 
        archiveStreamFactory0.createArchiveInputStream((InputStream) byteArrayInputStream0);
        fail(""Expecting exception: Exception"");
      } catch(Exception e) {
         //
         // No Archiver found for the stream signature
         //
         verifyException(""org.apache.commons.compress.archivers.ArchiveStreamFactory"", e);
      }
  }",1,
Compress,8,org.apache.commons.compress.archivers.tar.TarUtils_ESTest::test02,"  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[4] = (byte)54;
      // Undeclared exception!
      try { 
        TarUtils.parseOctal(byteArray0, (byte)3, 2);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Invalid byte 54 at offset 1 in '{NUL}6' len=2
         //
         verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
      }
  }",0,
Compress,8,org.apache.commons.compress.archivers.tar.TarUtils_ESTest::test04,"  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      try { 
        TarUtils.parseOctal(byteArray0, (byte)3, (byte)0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Length 0 must be at least 2
         //
         verifyException(""org.apache.commons.compress.archivers.tar.TarUtils"", e);
      }
  }",0,
Compress,41,org.apache.commons.compress.archivers.zip.ZipArchiveInputStream_ESTest::test03,"  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[40];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ZipArchiveInputStream zipArchiveInputStream0 = new ZipArchiveInputStream(byteArrayInputStream0);
      try { 
        zipArchiveInputStream0.getNextZipEntry();
        fail(""Expecting exception: ZipException"");
      } catch(ZipException e) {
         //
         // Unexpected record signature: 0X0
         //
         verifyException(""org.apache.commons.compress.archivers.zip.ZipArchiveInputStream"", e);
      }
  }",0,
Compress,34,org.apache.commons.compress.archivers.zip.X7875_NewUnix_ESTest::test04,"  public void test04()  throws Throwable  {
      X7875_NewUnix x7875_NewUnix0 = new X7875_NewUnix();
      ZipShort zipShort0 = x7875_NewUnix0.getCentralDirectoryLength();
      assertEquals(0, zipShort0.getValue());
}",0,"assertEquals(0, zipShort0.getValue())"
Compress,2,org.apache.commons.compress.archivers.ar.ArArchiveInputStream_ESTest::test04,"  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream(byteArrayInputStream0);
      arArchiveInputStream0.read();
      ArArchiveEntry arArchiveEntry0 = arArchiveInputStream0.getNextArEntry();
      assertNull(arArchiveEntry0);
}",0,
Compress,2,org.apache.commons.compress.archivers.ar.ArArchiveInputStream_ESTest::test04,"  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)1);
      ArArchiveInputStream arArchiveInputStream0 = new ArArchiveInputStream(byteArrayInputStream0);
      arArchiveInputStream0.read();
      ArArchiveEntry arArchiveEntry0 = arArchiveInputStream0.getNextArEntry();
  }",0,
Compress,43,org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream_ESTest::test18,"  public void test18()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ZipArchiveOutputStream zipArchiveOutputStream0 = new ZipArchiveOutputStream(byteArrayOutputStream0);
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(""AUy(e'"", true);
      zipArchiveOutputStream0.putArchiveEntry(zipArchiveEntry0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(""AUy(e'"");
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      zipArchiveOutputStream0.addRawArchiveEntry(zipArchiveEntry0, mockFileInputStream0);
      assertEquals(""PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000PK\u0007\b\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0003\u0004\u0014\u0000\b\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000PK\u0007\b\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDPK\u0003\u0004\u0014\u0000\u0000\b\b\u0000\uFFFD\uFFFDND\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"", byteArrayOutputStream0.toString());
}",0,assertNotNull(byteArrayOutputStream0.toString())
Compress,19,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField_ESTest::test19,"  public void test19()  throws Throwable  {
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
      ZipLong zipLong0 = ZipLong.AED_SIG;
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((-1L));
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
      byte[] byteArray0 = zip64ExtendedInformationExtraField1.getCentralDirectoryData();
      zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 1, 24);
      zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, true, true, true);
      assertNotSame(zip64ExtendedInformationExtraField0, zip64ExtendedInformationExtraField1);
}",0,
Compress,19,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField_ESTest::test19,"  public void test19()  throws Throwable  {
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField();
      ZipLong zipLong0 = ZipLong.AED_SIG;
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((-1L));
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField1 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
      byte[] byteArray0 = zip64ExtendedInformationExtraField1.getCentralDirectoryData();
      zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 1, 24);
      zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, true, true, true);
  }",0,
Compress,19,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField_ESTest::test23,"  public void test23()  throws Throwable  {
      ZipLong zipLong0 = ZipLong.AED_SIG;
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((-1L));
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
      byte[] byteArray0 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
      zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 1, 22);
      zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(false, false, true, false);
  }",0,
Compress,19,org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField_ESTest::test24,"  public void test24()  throws Throwable  {
      ZipLong zipLong0 = ZipLong.AED_SIG;
      ZipEightByteInteger zipEightByteInteger0 = new ZipEightByteInteger((-1L));
      Zip64ExtendedInformationExtraField zip64ExtendedInformationExtraField0 = new Zip64ExtendedInformationExtraField(zipEightByteInteger0, zipEightByteInteger0, zipEightByteInteger0, zipLong0);
      byte[] byteArray0 = zip64ExtendedInformationExtraField0.getCentralDirectoryData();
      zip64ExtendedInformationExtraField0.parseFromCentralDirectoryData(byteArray0, 1, 16);
      zip64ExtendedInformationExtraField0.reparseCentralDirectoryData(true, false, false, true);
  }",0,
Compress,1,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream_ESTest::test01,"  public void test01()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short)8);
      cpioArchiveOutputStream0.close();
      assertEquals(""q\uFFFD\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\uFFFD\uFFFD\uFFFD\uFFFD\u0000\u000B\u0000\u0000\u0000\u0000TRAILER!!!\u0000\u0000"", byteArrayOutputStream0.toString());
}",1,
Compress,1,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream_ESTest::test04,"  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short)4);
      cpioArchiveOutputStream0.close();
      assertEquals(""0707070000000000000000000000000000000000010000007777777777700001300000000000TRAILER!!!\u0000"", byteArrayOutputStream0.toString());
}",1,
Compress,1,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream_ESTest::test06,"  public void test06()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0, (short)2);
      cpioArchiveOutputStream0.close();
      assertEquals(""0707020000000000000000000000000000000000000001ffffffff00000000000000000000000000000000000000000000000b00000000TRAILER!!!\u0000\u0000\u0000\u0000"", byteArrayOutputStream0.toString());
}",1,
Compress,1,org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream_ESTest::test21,"  public void test21()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      CpioArchiveOutputStream cpioArchiveOutputStream0 = new CpioArchiveOutputStream(byteArrayOutputStream0);
      cpioArchiveOutputStream0.close();
      cpioArchiveOutputStream0.close();
      assertEquals(""0707010000000000000000000000000000000000000001ffffffff00000000000000000000000000000000000000000000000b00000000TRAILER!!!\u0000\u0000\u0000\u0000"", byteArrayOutputStream0.toString());
}",1,
Compress,6,org.apache.commons.compress.archivers.zip.ZipArchiveEntry_ESTest::test29,"  public void test29()  throws Throwable  {
      ZipArchiveEntry zipArchiveEntry0 = new ZipArchiveEntry();
      ZipArchiveEntry zipArchiveEntry1 = new ZipArchiveEntry(""y"");
      boolean boolean0 = zipArchiveEntry1.equals(zipArchiveEntry0);
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
Compress,17,org.apache.commons.compress.archivers.tar.TarUtils_ESTest::test15,"  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(6, byteArray0, 6, 6);
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, 6, 12);
      assertEquals(6L, long0);
}",0,
Compress,17,org.apache.commons.compress.archivers.tar.TarUtils_ESTest::test15,"  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[36];
      int int0 = TarUtils.formatLongOctalOrBinaryBytes(6, byteArray0, 6, 6);
      long long0 = TarUtils.parseOctalOrBinary(byteArray0, 6, 12);
  }",0,
JacksonCore,20,com.fasterxml.jackson.core.JsonGenerator_ESTest::test45,"  public void test45()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2660), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeEmbeddedObject((Object) null);
      assertEquals(57343, GeneratorBase.SURR2_LAST);
}",0,
JacksonCore,20,com.fasterxml.jackson.core.JsonGenerator_ESTest::test45,"  public void test45()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, (-2660), (ObjectCodec) null, byteArrayBuilder0);
      uTF8JsonGenerator0.writeEmbeddedObject((Object) null);
  }",0,
JacksonCore,4,com.fasterxml.jackson.core.util.TextBuffer_ESTest::test45,"  public void test45()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      char[] charArray0 = textBuffer0.getCurrentSegment();
      textBuffer0.expandCurrentSegment(262144);
      char[] charArray1 = textBuffer0.expandCurrentSegment();
      assertEquals(327680, charArray1.length);
}",0,
JacksonCore,7,com.fasterxml.jackson.core.json.JsonWriteContext_ESTest::test12,"  public void test12()  throws Throwable  {
      DupDetector dupDetector0 = DupDetector.rootDetector((JsonParser) null);
      JsonWriteContext jsonWriteContext0 = JsonWriteContext.createRootContext(dupDetector0);
      JsonWriteContext jsonWriteContext1 = jsonWriteContext0.createChildObjectContext();
      int int0 = jsonWriteContext1.writeValue();
      assertEquals(5, int0);
}",0,"assertEquals(1, int0)"
JacksonCore,14,com.fasterxml.jackson.core.io.IOContext_ESTest::test22,"  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.releaseWriteEncodingBuffer(byteArray0);
      assertTrue(iOContext0.isResourceManaged());
}",0,assertTrue(iOContext0.isResourceManaged())
JacksonCore,14,com.fasterxml.jackson.core.io.IOContext_ESTest::test22,"  public void test22()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray0 = iOContext0.allocReadIOBuffer();
      iOContext0.releaseWriteEncodingBuffer(byteArray0);
  }",0,
JacksonCore,8,com.fasterxml.jackson.core.util.TextBuffer_ESTest::test27,"  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      TextBuffer textBuffer0 = new TextBuffer(bufferRecycler0);
      textBuffer0.resetWithEmpty();
      char[] charArray0 = textBuffer0.getTextBuffer();
      assertNotNull(charArray0);
}",0,assertNotNull(charArray0)
JacksonCore,2,com.fasterxml.jackson.core.json.ReaderBasedJsonParser_ESTest::test26,"  public void test26()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ""1IoL_.}7~~\""HL_r*"", false);
      StringReader stringReader0 = new StringReader(""0JMmtsG8ryBAGj-U!"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unexpected character ('J' (code 74)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000014; line: 1, column: 3]
         //
         verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
      }
  }",0,
JacksonCore,2,com.fasterxml.jackson.core.json.ReaderBasedJsonParser_ESTest::test27,"  public void test27()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(""1IoL_.}7~~\""HL_r*"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1722), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextToken();
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unexpected character ('I' (code 73)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: 3]
         //
         verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
      }
  }",0,
JacksonCore,2,com.fasterxml.jackson.core.json.ReaderBasedJsonParser_ESTest::test28,"  public void test28()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(""x 2`=sNFw!"");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      int int0 = stringReader0.read();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2000, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString(""com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer"");
      try { 
        readerBasedJsonParser0.nextFieldName(serializedString0);
        fail(""Expecting exception: IOException"");
      } catch(IOException e) {
         //
         // Unexpected character ('`' (code 96)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: 4]
         //
         verifyException(""com.fasterxml.jackson.core.JsonParser"", e);
      }
  }",0,
JacksonCore,17,com.fasterxml.jackson.core.json.UTF8JsonGenerator_ESTest::test69,"  public void test69()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile(""i]mir@"");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      byte[] byteArray0 = new byte[1];
      UTF8JsonGenerator uTF8JsonGenerator0 = new UTF8JsonGenerator(iOContext0, 1, (ObjectCodec) null, mockFileOutputStream0, byteArray0, 154, true);
      uTF8JsonGenerator0.writeString((char[]) null, 2, 0);
      // Undeclared exception!
      try { 
        uTF8JsonGenerator0.writeNumber((-1.0F));
        fail(""Expecting exception: ArrayIndexOutOfBoundsException"");
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException(""com.fasterxml.jackson.core.json.UTF8JsonGenerator"", e);
      }
  }",0,
JacksonCore,22,com.fasterxml.jackson.core.filter.FilteringParserDelegate_ESTest::test43,"  public void test43()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, true);
      StringReader stringReader0 = new StringReader(""[1D.Y`lbK6$"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1266, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0._nextToken2();
      boolean boolean0 = filteringParserDelegate0.hasTokenId(33);
      assertEquals(1, filteringParserDelegate0.getMatchCount());
}",0,"assertEquals(0, filteringParserDelegate0.getMatchCount())"
JacksonCore,22,com.fasterxml.jackson.core.filter.FilteringParserDelegate_ESTest::test50,"  public void test50()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, true);
      StringReader stringReader0 = new StringReader(""[1D.Y`lbK6$"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1266, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      filteringParserDelegate0._nextToken2();
      boolean boolean0 = filteringParserDelegate0.isExpectedStartArrayToken();
      assertEquals(1, filteringParserDelegate0.getMatchCount());
}",0,"assertEquals(0, filteringParserDelegate0.getMatchCount())"
JacksonCore,22,com.fasterxml.jackson.core.filter.FilteringParserDelegate_ESTest::test67,"  public void test67()  throws Throwable  {
      TokenFilter tokenFilter0 = new TokenFilter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, tokenFilter0, false);
      StringReader stringReader0 = new StringReader(""[1D.Y`lbK6$"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1266, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FilteringParserDelegate filteringParserDelegate0 = new FilteringParserDelegate(readerBasedJsonParser0, tokenFilter0, true, true);
      FilteringParserDelegate filteringParserDelegate1 = new FilteringParserDelegate(filteringParserDelegate0, tokenFilter0, false, false);
      filteringParserDelegate0.nextToken();
      filteringParserDelegate1.nextValue();
      assertEquals(1, filteringParserDelegate0.getMatchCount());
}",0,"assertEquals(0, filteringParserDelegate0.getMatchCount())"
JacksonDatabind,49,com.fasterxml.jackson.databind.ser.impl.WritableObjectId_ESTest::test4,"  public void test4()  throws Throwable  {
      ObjectIdGenerators.IntSequenceGenerator objectIdGenerators_IntSequenceGenerator0 = new ObjectIdGenerators.IntSequenceGenerator();
      WritableObjectId writableObjectId0 = new WritableObjectId(objectIdGenerators_IntSequenceGenerator0);
      writableObjectId0.generateId(objectIdGenerators_IntSequenceGenerator0);
      Object object0 = new Object();
      Object object1 = writableObjectId0.generateId(object0);
      assertEquals((-1), object1);
}",0,
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test01,"  public void test01()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, stdValueInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, (TypeDeserializer) null);
      MapDeserializer mapDeserializer1 = new MapDeserializer(mapDeserializer0);
      assertFalse(mapDeserializer1.isCachable());
}",0,assertTrue(mapDeserializer1.isCachable())
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test02,"  public void test02()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, stdValueInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, (TypeDeserializer) null);
      JavaType javaType0 = mapDeserializer0.getValueType();
      assertFalse(mapDeserializer0.isCachable());
}",0,assertFalse(mapDeserializer0.isCachable())
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test07,"  public void test07()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class0, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 3980);
      MapDeserializer mapDeserializer0 = new MapDeserializer(collectionLikeType0, stdValueInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, (TypeDeserializer) null);
      mapDeserializer0.getContentType();
      assertFalse(mapDeserializer0.isCachable());
}",0,
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test08,"  public void test08()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      Class<String> class2 = String.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class2, 1006);
      MapDeserializer mapDeserializer0 = new MapDeserializer(collectionLikeType0, stdValueInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, (TypeDeserializer) null);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<Error> class3 = Error.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class3);
      mapDeserializer0.withResolved(stdKeyDeserializer_StringKD0, (TypeDeserializer) null, mapDeserializer0, linkedHashSet0);
      assertFalse(mapDeserializer0.isCachable());
}",0,assertTrue(mapDeserializer0.isCachable())
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test09,"  public void test09()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      Class<MapperFeature> class2 = MapperFeature.class;
      CoreXMLDeserializers.Std coreXMLDeserializers_Std0 = new CoreXMLDeserializers.Std(class2, 10);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, stdValueInstantiator0, (KeyDeserializer) null, coreXMLDeserializers_Std0, (TypeDeserializer) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      TypeFactory typeFactory0 = TypeFactory.defaultInstance();
      ClassNameIdResolver classNameIdResolver0 = new ClassNameIdResolver(simpleType0, typeFactory0);
      Class<InputStream> class3 = InputStream.class;
      AsWrapperTypeDeserializer asWrapperTypeDeserializer0 = new AsWrapperTypeDeserializer(collectionLikeType0, classNameIdResolver0, """", false, class3);
      mapDeserializer0.withResolved((KeyDeserializer) null, asWrapperTypeDeserializer0, coreXMLDeserializers_Std0, hashSet0);
      assertFalse(mapDeserializer0.isCachable());
}",0,assertFalse(mapDeserializer0.isCachable())
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test10,"  public void test10()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, stdValueInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, (TypeDeserializer) null);
      HashSet<String> hashSet0 = new HashSet<String>();
      MapDeserializer mapDeserializer1 = mapDeserializer0.withResolved((KeyDeserializer) null, (TypeDeserializer) null, fromStringDeserializer_Std0, hashSet0);
      MapDeserializer mapDeserializer2 = mapDeserializer1.withResolved((KeyDeserializer) null, (TypeDeserializer) null, fromStringDeserializer_Std0, hashSet0);
      assertFalse(mapDeserializer0.isCachable());
}",0,assertFalse(mapDeserializer0.isCachable())
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test11,"  public void test11()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, stdValueInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, (TypeDeserializer) null);
      mapDeserializer0.setIgnorableProperties((String[]) null);
      assertFalse(mapDeserializer0.isCachable());
}",0,assertFalse(mapDeserializer0.isCachable())
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test13,"  public void test13()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.TYPE;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 6);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, stdValueInstantiator0, (KeyDeserializer) null, fromStringDeserializer_Std0, (TypeDeserializer) null);
      String[] stringArray0 = new String[0];
      mapDeserializer0.setIgnorableProperties(stringArray0);
      assertFalse(mapDeserializer0.isCachable());
}",0,assertFalse(mapDeserializer0.isCachable())
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test15,"  public void test15()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      Class<Error> class2 = Error.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class2);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class2, 9);
      MapDeserializer mapDeserializer0 = new MapDeserializer(collectionLikeType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      DefaultDeserializationContext.Impl defaultDeserializationContext_Impl0 = new DefaultDeserializationContext.Impl(beanDeserializerFactory0);
      mapDeserializer0.resolve(defaultDeserializationContext_Impl0);
      assertFalse(mapDeserializer0.isCachable());
}",0,assertFalse(mapDeserializer0.isCachable())
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test18,"  public void test18()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      Class<Integer> class1 = Integer.class;
      CollectionLikeType collectionLikeType0 = CollectionLikeType.construct(class1, simpleType0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, collectionLikeType0);
      Class<Error> class2 = Error.class;
      StdKeyDeserializer.StringKD stdKeyDeserializer_StringKD0 = StdKeyDeserializer.StringKD.forType(class2);
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class2, 9);
      MapDeserializer mapDeserializer0 = new MapDeserializer(collectionLikeType0, stdValueInstantiator0, stdKeyDeserializer_StringKD0, fromStringDeserializer_Std0, (TypeDeserializer) null);
      boolean boolean0 = mapDeserializer0.isCachable();
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
JacksonDatabind,12,com.fasterxml.jackson.databind.deser.std.MapDeserializer_ESTest::test20,"  public void test20()  throws Throwable  {
      Class<FilterInputStream> class0 = FilterInputStream.class;
      SimpleType simpleType0 = SimpleType.constructUnsafe(class0);
      StdValueInstantiator stdValueInstantiator0 = new StdValueInstantiator((DeserializationConfig) null, simpleType0);
      Class<Integer> class1 = Integer.class;
      StdKeyDeserializer stdKeyDeserializer0 = StdKeyDeserializer.forType(class1);
      MapDeserializer mapDeserializer0 = new MapDeserializer(simpleType0, stdValueInstantiator0, stdKeyDeserializer0, (JsonDeserializer<Object>) null, (TypeDeserializer) null);
      boolean boolean0 = mapDeserializer0.isCachable();
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
JacksonDatabind,42,com.fasterxml.jackson.databind.deser.std.FromStringDeserializer_ESTest::test35,"  public void test35()  throws Throwable  {
      Class<InetAddress> class0 = InetAddress.class;
      FromStringDeserializer.Std fromStringDeserializer_Std0 = new FromStringDeserializer.Std(class0, 8);
      Object object0 = fromStringDeserializer_Std0._deserializeFromEmptyString();
      assertEquals("""", object0.toString());
}",0,assertNotNull(object0.toString())
JacksonDatabind,36,com.fasterxml.jackson.databind.util.StdDateFormat_ESTest::test12,"  public void test12()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.instance.setLenient(true);
      assertTrue(stdDateFormat0.isLenient());
}",0,assertTrue(stdDateFormat0.isLenient())
JacksonDatabind,36,com.fasterxml.jackson.databind.util.StdDateFormat_ESTest::test12,"  public void test12()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.instance.setLenient(true);
  }",0,
JacksonDatabind,36,com.fasterxml.jackson.databind.util.StdDateFormat_ESTest::test13,"  public void test13()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.setLenient(false);
      assertFalse(stdDateFormat0.isLenient());
}",0,assertFalse(stdDateFormat0.isLenient())
JacksonDatabind,36,com.fasterxml.jackson.databind.util.StdDateFormat_ESTest::test13,"  public void test13()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.setLenient(false);
  }",0,
JacksonDatabind,106,com.fasterxml.jackson.databind.node.TreeTraversingParser_ESTest::test32,"  public void test32()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-9223372036854775808L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getByteValue();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.fasterxml.jackson.databind.node.TreeTraversingParser"", e);
      }
  }",0,
JacksonDatabind,106,com.fasterxml.jackson.databind.node.TreeTraversingParser_ESTest::test34,"  public void test34()  throws Throwable  {
      LongNode longNode0 = LongNode.valueOf((-9223372036854775808L));
      TreeTraversingParser treeTraversingParser0 = new TreeTraversingParser(longNode0);
      // Undeclared exception!
      try { 
        treeTraversingParser0.getLongValue();
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.fasterxml.jackson.databind.node.TreeTraversingParser"", e);
      }
  }",0,
JacksonDatabind,105,com.fasterxml.jackson.databind.deser.std.JdkDeserializers_ESTest::test5,"  public void test5()  throws Throwable  {
      Class<Void> class0 = Void.class;
      JsonDeserializer<?> jsonDeserializer0 = JdkDeserializers.find(class0, ""com.fasterxml.jackson.databind.JavaType"");
      assertNotNull(jsonDeserializer0);
}",0,assertNotNull(jsonDeserializer0)
JacksonDatabind,99,com.fasterxml.jackson.databind.type.ReferenceType_ESTest::test03,"  public void test03()  throws Throwable  {
      SimpleType simpleType0 = TypeFactory.CORE_TYPE_OBJECT;
      ReferenceType referenceType0 = new ReferenceType(simpleType0, simpleType0);
      String string0 = referenceType0.toString();
      assertEquals(""[reference type, class java.lang.Object<java.lang.Object><[simple type, class java.lang.Object]>]"", string0);
}",0,
JacksonDatabind,97,com.fasterxml.jackson.databind.node.POJONode_ESTest::test18,"  public void test18()  throws Throwable  {
      POJONode pOJONode0 = new POJONode(""b4axvGC0V"");
      JsonFactory jsonFactory0 = new JsonFactory();
      StringWriter stringWriter0 = new StringWriter();
      JsonGenerator jsonGenerator0 = jsonFactory0.createGenerator((Writer) stringWriter0);
      // Undeclared exception!
      try { 
        pOJONode0.serialize(jsonGenerator0, (SerializerProvider) null);
        fail(""Expecting exception: NullPointerException"");
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException(""com.fasterxml.jackson.databind.node.POJONode"", e);
      }
  }",0,
Lang,49,org.apache.commons.lang.math.Fraction_ESTest::test28,"  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.getFraction(0, 394);
      Fraction fraction1 = fraction0.reduce();
      assertEquals(1, fraction1.getDenominator());
}",1,
Lang,52,org.apache.commons.lang.StringEscapeUtils_ESTest::test08,"  public void test08()  throws Throwable  {
      String string0 = ""<<\\u+ob%jNBH/"";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertEquals(""<<\\\\u+ob%jNBH\\/"", string1);
}",0,assertNotNull(string1)
Lang,52,org.apache.commons.lang.StringEscapeUtils_ESTest::test09,"  public void test09()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava(""3b#H/LYs'XYVNA3|'T"");
      assertEquals(""3b#H\\/LYs'XYVNA3|'T"", string0);
}",0,
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test015,"  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.appendFixedWidthPadRight((Object) null, 45, 'Z');
      assertEquals(45, strBuilder0.capacity());
}",0,"assertEquals(0, strBuilder0.capacity())"
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test015,"  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.appendFixedWidthPadRight((Object) null, 45, 'Z');
  }",0,
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertNotNull(strBuilder1);
}",0,
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertSame(strBuilder0, strBuilder1);
}",0,
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertSame(strBuilder1, strBuilder0);
}",0,
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertEquals(574, strBuilder0.length());
}",0,"assertEquals(1, strBuilder0.length())"
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertEquals(574, strBuilder0.size());
}",0,"assertEquals(1, strBuilder0.size())"
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertNull(strBuilder0.getNewLineText());
}",0,assertNotNull(strBuilder0.getNewLineText())
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertEquals(574, strBuilder0.capacity());
}",0,"assertEquals(1, strBuilder0.capacity())"
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertFalse(strBuilder0.isEmpty());
}",0,assertTrue(strBuilder0.isEmpty())
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertNull(strBuilder0.getNullText());
}",0,assertNotNull(strBuilder0.getNullText())
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertEquals(574, strBuilder1.size());
}",0,"assertEquals(1, strBuilder1.size())"
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertFalse(strBuilder1.isEmpty());
}",0,assertTrue(strBuilder1.isEmpty())
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertNull(strBuilder1.getNewLineText());
}",0,assertNotNull(strBuilder1.getNewLineText())
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertEquals(574, strBuilder1.capacity());
}",0,"assertEquals(1, strBuilder1.capacity())"
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertNull(strBuilder1.getNullText());
}",0,assertNotNull(strBuilder1.getNullText())
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
      assertEquals(574, strBuilder1.length());
}",0,"assertEquals(1, strBuilder1.length())"
Lang,47,org.apache.commons.lang.text.StrBuilder_ESTest::test132,"  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(574);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 574, '\'');
  }",0,
Lang,46,org.apache.commons.lang.StringEscapeUtils_ESTest::test09,"  public void test09()  throws Throwable  {
      String string0 = StringEscapeUtils.escapeJava(""OZw9N)RwzH/"");
      assertEquals(""OZw9N)RwzH/"", string0);
}",0,assertNotNull(string0)
Lang,35,org.apache.commons.lang3.ArrayUtils_ESTest::test349,"  public void test349()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Object[]) null, (Object) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Arguments cannot both be null
         //
         verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
      }
  }",0,
Lang,35,org.apache.commons.lang3.ArrayUtils_ESTest::test352,"  public void test352()  throws Throwable  {
      // Undeclared exception!
      try { 
        ArrayUtils.add((Integer[]) null, (-7), (Integer) null);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Array and element cannot both be null
         //
         verifyException(""org.apache.commons.lang3.ArrayUtils"", e);
      }
  }",0,
Lang,7,org.apache.commons.lang3.math.NumberUtils_ESTest::test035,"  public void test035()  throws Throwable  {
      try { 
        NumberUtils.createNumber(""--X+.\""LnzwmpM1g+fl"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // --X+.\""LnzwmpM1g+fl is not a valid number.
         //
         verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
      }
  }",1,
Lang,7,org.apache.commons.lang3.math.NumberUtils_ESTest::test038,"  public void test038()  throws Throwable  {
      try { 
        NumberUtils.createNumber(""--0X+\""L[nzw}mpMg+fl"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // --0X+\""L[nzw}mpMg+fl is not a valid number.
         //
         verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
      }
  }",1,
Lang,7,org.apache.commons.lang3.math.NumberUtils_ESTest::test047,"  public void test047()  throws Throwable  {
      try { 
        NumberUtils.createNumber(""--0XVG\""AMz:>EyhF"");
        fail(""Expecting exception: NumberFormatException"");
      } catch(NumberFormatException e) {
         //
         // --0XVG\""AMz:>EyhF is not a valid number.
         //
         verifyException(""org.apache.commons.lang3.math.NumberUtils"", e);
      }
  }",1,
Lang,45,org.apache.commons.lang.WordUtils_ESTest::test30,"  public void test30()  throws Throwable  {
      String string0 = WordUtils.abbreviate(""wTDdt<TJing. Mac"", 421, 13, "" "");
      assertEquals(""wTDdt<TJing. Mac"", string0);
}",0,
Lang,45,org.apache.commons.lang.WordUtils_ESTest::test30,"  public void test30()  throws Throwable  {
      String string0 = WordUtils.abbreviate(""wTDdt<TJing. Mac"", 421, 13, "" "");
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test00,"  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\"" ; gave up at index 83
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test01,"  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""HZJV^H"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""HZJV^H\"" ; gave up at index 2
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test02,"  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(""WyGf<\""J"");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""WyGf<\""J"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""WyGf<\""J\"" ; gave up at index 3
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test17,"  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""`@Z$=yy`/|$~1LALU&P"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""`@Z$=yy`/|$~1LALU&P\"" ; gave up at index 13
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test18,"  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(""-"");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""{K_EPT\""8Xh0!`)"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""{K_EPT\""8Xh0!`)\"" ; gave up at index 4
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test21,"  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""S(X"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""S(X\"" ; gave up at index 2
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test22,"  public void test22()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""D):ZG'] }"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""D):ZG'] }\"" ; gave up at index 5
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test23,"  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""W*f<\""T(HJH"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""W*f<\""T(HJH\"" ; gave up at index 2
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test24,"  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""y,}5Dn@;}[V"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""y,}5Dn@;}[V\"" ; gave up at index 5
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test25,"  public void test25()  throws Throwable  {
      Locale locale0 = new Locale(""Zt`q("", ""Zt`q("", ""Zt`q("");
      TimeZone timeZone0 = TimeZone.getTimeZone(""Zt`q("");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""-7|@]F5Tc%m($PLP~tw"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""-7|@]F5Tc%m($PLP~tw\"" ; gave up at index 7
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test27,"  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""/,q3rndcZ"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""/,q3rndcZ\"" ; gave up at index 2
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test28,"  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""D0=of5C)x}=1AuB&"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""D0=of5C)x}=1AuB&\"" ; gave up at index 3
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test29,"  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("";J&%Dl.p[7Zh_nAhzE"");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""FH2(bMqDjaKCbX"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""FH2(bMqDjaKCbX\"" ; gave up at index 4
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test30,"  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""3fr&HfA"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""3fr&HfA\"" ; gave up at index 1
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test31,"  public void test31()  throws Throwable  {
      Locale locale0 = new Locale(""6I"", ""6I"", ""D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++"");
      TimeZone timeZone0 = TimeZone.getTimeZone(""SNXk?8a4BQ_3A|Q+i"");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""6I"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""6I\"" ; gave up at index 1
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test32,"  public void test32()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone(""].@?"");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("")\""K9-z7 {jjN!\""+qVy"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"")\""K9-z7 {jjN!\""+qVy\"" ; gave up at index 10
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test33,"  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""88vf,z'r"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""88vf,z'r\"" ; gave up at index 2
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test34,"  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(""9*f<\""H*H"");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""9*f<\""H*H"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""9*f<\""H*H\"" ; gave up at index 2
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test35,"  public void test35()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("":3se'${myQQ9)!|"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"":3se'${myQQ9)!|\"" ; gave up at index 3
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test36,"  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""`@Z=yy`/|$~1LALU&P"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""`@Z=yy`/|$~1LALU&P\"" ; gave up at index 12
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test37,"  public void test37()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""]k>QHlD*"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""]k>QHlD*\"" ; gave up at index 3
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,9,org.apache.commons.lang3.time.FastDateParser_ESTest::test39,"  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(""@SKFxk)?Aeh4iJ"", timeZone0, locale0);
        fail(""Expecting exception: IllegalArgumentException"");
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \""@SKFxk)?Aeh4iJ\"" ; gave up at index 4
         //
         verifyException(""org.apache.commons.lang3.time.FastDateParser"", e);
      }
  }",0,
Lang,33,org.apache.commons.lang3.ClassUtils_ESTest::test73,"  public void test73()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertEquals(3, classArray0.length);
}",0,
Lang,33,org.apache.commons.lang3.ClassUtils_ESTest::test73,"  public void test73()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
  }",0,
Lang,58,org.apache.commons.lang.math.NumberUtils_ESTest::test030,"  public void test030()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(""6l"");
      assertEquals(6L, number0);
}",1,
Lang,58,org.apache.commons.lang.math.NumberUtils_ESTest::test030,"  public void test030()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(""6l"");
  }",1,
Lang,57,org.apache.commons.lang.LocaleUtils_ESTest::test18,"  public void test18()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
Lang,57,org.apache.commons.lang.LocaleUtils_ESTest::test18,"  public void test18()  throws Throwable  {
      boolean boolean0 = LocaleUtils.isAvailableLocale((Locale) null);
  }",0,
Lang,57,org.apache.commons.lang.LocaleUtils_ESTest::test19,"  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
}",0,assertTrue(boolean0)
Lang,57,org.apache.commons.lang.LocaleUtils_ESTest::test19,"  public void test19()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
  }",0,
Lang,5,org.apache.commons.lang3.LocaleUtils_ESTest::test07,"  public void test07()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale(""_QJ"");
      assertEquals("""", locale0.getVariant());
}",1,
Lang,5,org.apache.commons.lang3.LocaleUtils_ESTest::test07,"  public void test07()  throws Throwable  {
      Locale locale0 = LocaleUtils.toLocale(""_QJ"");
  }",1,
Lang,41,org.apache.commons.lang.ClassUtils_ESTest::test11,"  public void test11()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName(""[LJNM-;"");
      assertEquals(""JNM-[]"", string0);
}",0,assertNotNull(string0)
Lang,41,org.apache.commons.lang.ClassUtils_ESTest::test12,"  public void test12()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName(""["");
      assertEquals(""][]"", string0);
}",0,
Lang,41,org.apache.commons.lang.ClassUtils_ESTest::test13,"  public void test13()  throws Throwable  {
      String string0 = ClassUtils.getShortClassName(""[[LJNM-"");
      assertEquals(""LJNM-[][]"", string0);
}",0,assertNotNull(string0)
Lang,41,org.apache.commons.lang.ClassUtils_ESTest::test14,"  public void test14()  throws Throwable  {
      String string0 = ClassUtils.getShortCanonicalName(""B"");
      assertEquals(""byte"", string0);
}",0,
Lang,41,org.apache.commons.lang.ClassUtils_ESTest::test21,"  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        ClassUtils.getPackageName(""["");
        fail(""Expecting exception: StringIndexOutOfBoundsException"");
      } catch(StringIndexOutOfBoundsException e) {
      }
  }",0,
Lang,23,org.apache.commons.lang3.text.ExtendedMessageFormat_ESTest::test08,"  public void test08()  throws Throwable  {
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(""*3-"");
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(""*3-"", hashMap0);
      boolean boolean0 = extendedMessageFormat0.equals(extendedMessageFormat1);
      assertFalse(boolean0);
}",0,assertTrue(boolean0)
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test2,"  public void test2()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '&';
      charArray0[4] = '#';
      charArray0[5] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
      assertEquals(""\u0000\u0000\u0000&#X\u0000"", string0);
}",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test2,"  public void test2()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '&';
      charArray0[4] = '#';
      charArray0[5] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
  }",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test3,"  public void test3()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[3] = '&';
      charArray0[4] = '#';
      charArray0[5] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
      assertEquals(""\u0000\u0000\u0000&#X"", string0);
}",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test3,"  public void test3()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[3] = '&';
      charArray0[4] = '#';
      charArray0[5] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
  }",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test4,"  public void test4()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
      assertEquals(""&#b"", string0);
}",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test4,"  public void test4()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = 'b';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
  }",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test5,"  public void test5()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
      assertEquals(""\u0004\u0000\u0000\u0000"", string0);
}",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test5,"  public void test5()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
  }",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test6,"  public void test6()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
      assertEquals(""&#l\u0000\u0000"", string0);
}",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test6,"  public void test6()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = 'l';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
  }",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test7,"  public void test7()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
      assertEquals(""&#B\u0000\u0000\u0000"", string0);
}",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test7,"  public void test7()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
  }",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test8,"  public void test8()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
      assertEquals(""\u0004"", string0);
}",0,
Lang,19,org.apache.commons.lang3.text.translate.NumericEntityUnescaper_ESTest::test8,"  public void test8()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = '#';
      charArray0[2] = '4';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper();
      String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0);
  }",0,
Lang,65,org.apache.commons.lang.time.DateUtils_ESTest::test53,"  public void test53()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)DateUtils.UTC_TIME_ZONE;
      Locale locale0 = Locale.CANADA;
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) zoneInfo0, locale0);
      Calendar calendar1 = DateUtils.truncate(calendar0, 13);
      assertEquals(""org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\""GMT\"",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]"", calendar1.toString());
}",0,
Lang,65,org.apache.commons.lang.time.DateUtils_ESTest::test54,"  public void test54()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)DateUtils.UTC_TIME_ZONE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(zoneInfo0);
      Date date0 = DateUtils.round((Object) mockGregorianCalendar0, 12);
      assertEquals(""Fri Feb 14 20:21:00 GMT 2014"", date0.toString());
}",0,assertNotNull(date0.toString())
